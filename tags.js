// Generated by CoffeeScript 1.6.3
/*
Tag input plugin
works great with the autocomplete plugin

@author Bastian Allgeier <bastian@getkirby.com>
@copyright Bastian Allgeier 2012
@license MIT
*/


(function() {
  (function($) {
    $.tagbox = function(element, options) {
      var $element, defaults, plugin;
      defaults = {
        lowercase: true,
        classname: "tagbox",
        separator: ", ",
        duplicates: false,
        minLength: 1,
        maxLength: 140,
        keydown: function() {},
        onAdd: function() {},
        onRemove: function() {},
        onDuplicate: function() {
          return plugin.input.focus();
        },
        onInvalid: function() {
          return plugin.input.focus();
        },
        onReady: function() {}
      };
      plugin = this;
      plugin.settings = {};
      $element = $(element);
      element = element;
      plugin.init = function() {
        var $id, $name, $val;
        plugin.settings = $.extend({}, defaults, options);
        $name = $element.attr("name");
        $id = $element.attr("id");
        $val = $element.val();
        plugin.index = [];
        plugin.val = "";
        plugin.focused = false;
        plugin.origin = $element.addClass("tagboxified").hide();
        plugin.box = $("<div class=\"" + plugin.settings.classname + "\"><ul><li class=\"new\"><input autocomplete=\"off\" tabindex=\"0\" type=\"text\" /></li></ul></div>");
        plugin.input = plugin.box.find("input").css("width", 20);
        plugin.bhits = 0;
        plugin.lhits = 0;
        plugin.origin.before(plugin.box);
        plugin.measure = $("<div style=\"display: inline\" />").css({
          "font-size": plugin.input.css("font-size"),
          "font-family": plugin.input.css("font-family"),
          visibility: "hidden",
          position: "absolute",
          top: -10000,
          left: -10000
        });
        $("body").append(plugin.measure);
        plugin.box.click(function(e) {
          plugin.focus();
          plugin.input.focus();
          return e.stopPropagation();
        });
        plugin.input.keydown(function(e) {
          plugin.val = plugin.input.val();
          plugin.position = plugin.selection();
          return plugin.settings.keydown.call(plugin, e, plugin.val);
        });
        plugin.input.keyup(function(e) {
          plugin.val = plugin.input.val();
          plugin.position = plugin.selection();
          plugin.resize(plugin.val);
          if (plugin.val.match(new RegExp(plugin.settings.separator))) {
            return plugin.add(plugin.val);
          }
        });
        plugin.input.focus(function(e) {
          plugin.input.focused = true;
          plugin.deselect();
          plugin.bhits = 0;
          return plugin.focus();
        });
        plugin.input.blur(function(e) {
          plugin.input.focused = false;
          plugin.bhits = 0;
          if (plugin.val.length === 0) {
            return plugin.blur();
          }
        });
        plugin.settings.onReady.call(this);
        $(document).keydown(function(e) {
          if (!plugin.focused) {
            return true;
          }
          switch (e.keyCode) {
            case 8:
              if (!plugin.input.focused) {
                plugin.remove();
                return false;
              }
              if (plugin.val.length === 0) {
                plugin.next();
                return false;
              } else if (plugin.position === 0) {
                if (plugin.bhits > 0) {
                  plugin.bhits = 0;
                  plugin.next();
                  return false;
                }
                return plugin.bhits++;
              }
              break;
            case 37:
              if (!plugin.input.focused) {
                return plugin.previous();
              }
              if (plugin.val.length === 0) {
                plugin.next();
                return false;
              } else if (plugin.position === 0) {
                if (plugin.lhits > 0) {
                  plugin.lhits = 0;
                  plugin.next();
                  return false;
                }
                return plugin.lhits++;
              }
              break;
            case 39:
              if (!plugin.input.focused) {
                plugin.next();
                return false;
              }
              break;
            case 9:
              if (plugin.input.focused && plugin.val.length > plugin.settings.minLength) {
                plugin.add(plugin.val);
                return false;
              } else if (plugin.selected().length > 0) {
                plugin.deselect();
                plugin.input.focus();
                return false;
              }
              break;
            case 13:
            case 188:
              if (plugin.input.focused) {
                plugin.add(plugin.val);
                return false;
              }
          }
        }).click(function(e) {
          if (plugin.val.length > 0) {
            return plugin.add(plugin.val);
          }
        });
        if ($val.length > 0) {
          return plugin.add($val);
        }
      };
      plugin.resize = function(value) {
        plugin.measure.text(value);
        return plugin.input.css("width", plugin.measure.width() + 20);
      };
      plugin.focus = function(input) {
        if (plugin.focused) {
          return true;
        }
        $(".tagboxified").not(plugin.origin).each(function() {
          if ($(this).data("tagbox")) {
            return $(this).data("tagbox").blur();
          }
        });
        plugin.box.addClass("focus");
        plugin.focused = true;
        if (input === undefined) {
          input = true;
        }
        if (input !== false) {
          return plugin.input.focus();
        }
      };
      plugin.blur = function() {
        if (!plugin.focused) {
          return true;
        }
        plugin.box.removeClass("focus");
        plugin.focused = false;
        plugin.input.blur();
        return plugin.deselect();
      };
      plugin.tag = function(tag) {
        tag = tag.replace(/,/g, "").replace(/;/g, "");
        if (plugin.settings.lowercase) {
          tag = tag.toLowerCase();
        }
        return $.trim(tag);
      };
      plugin.serialize = function() {
        return plugin.index;
      };
      plugin.string = function() {
        return plugin.serialize().toString();
      };
      plugin.add = function(tag) {
        var li, serialized, tags;
        plugin.input.val("");
        if (!tag && plugin.val.length > 0) {
          return plugin.add(plugin.val);
        } else {
          if (!tag) {
            return true;
          }
        }
        if ($.isArray(tag) || tag.match(new RegExp(plugin.settings.separator))) {
          tags = ($.isArray(tag) ? tag : tag.split(plugin.settings.separator));
          $.each(tags, function(i, t) {
            return plugin.add(t);
          });
          return true;
        }
        tag = plugin.tag(tag);
        if (tag.length < plugin.settings.minLength || tag.length > plugin.settings.maxLength) {
          return plugin.settings.onInvalid.call(plugin, tag, length);
        }
        if (plugin.settings.duplicates === false ? $.inArray(tag, plugin.index) > -1 : void 0) {
          return plugin.settings.onDuplicate.call(plugin, tag);
        }
        plugin.index.push(tag);
        li = $("<li><span class=\"tag\"></span><span class=\"delete\">&#215;</span></li>").data("tag", tag);
        li.find(".tag").text(tag);
        li.find(".delete").click(function() {
          return plugin.remove(li);
        });
        li.click(function(e) {
          plugin.blur();
          e.stopPropagation();
          return plugin.select(li);
        });
        li.focus(function(e) {
          return plugin.select(li);
        });
        plugin.input.parent().before(li);
        plugin.input.val("");
        plugin.input.css("width", 20);
        serialized = plugin.serialize();
        plugin.origin.val(serialized.join(plugin.settings.separator));
        return plugin.settings.onAdd.call(plugin, tag, serialized, li);
      };
      plugin.select = function(element) {
        if (typeof element === "string") {
          element = plugin.find(element);
          if (!element) {
            return false;
          }
        }
        if (element.length === 0) {
          return false;
        }
        plugin.input.blur();
        this.deselect();
        element.addClass("selected");
        return plugin.focus(false);
      };
      plugin.selected = function() {
        return plugin.box.find(".selected");
      };
      plugin.deselect = function() {
        var selected;
        selected = plugin.selected();
        return selected.removeClass("selected");
      };
      plugin.find = function(tag) {
        element = false;
        plugin.box.find("li").not(".new").each(function() {
          if ($(this).data("tag") === tag) {
            return element = $(this);
          }
        });
        return element;
      };
      plugin.remove = function(element) {
        var previous, selected, serialized, tag;
        plugin.input.val("");
        if (typeof element === "string") {
          element = plugin.find(element);
          if (!element.length) {
            return false;
          }
        }
        selected = plugin.selected();
        if (!element && selected.length > 0) {
          element = selected.first();
        }
        previous = plugin.previous(true);
        if (previous.length === 0) {
          plugin.next();
        } else {
          plugin.select(previous);
        }
        tag = element.find(".tag").text();
        plugin.removeFromIndex(tag);
        element.remove();
        serialized = plugin.serialize();
        plugin.origin.val(serialized);
        return plugin.settings.onRemove.call(plugin, tag, serialized, element);
      };
      plugin.removeFromIndex = function(tag) {
        var i;
        i = plugin.index.indexOf(tag);
        return plugin.index.splice(i, 1);
      };
      plugin.selection = function() {
        var i, r, v;
        i = plugin.input[0];
        v = plugin.val;
        if (!i.createTextRange) {
          return i.selectionStart;
        }
        r = document.selection.createRange().duplicate();
        r.moveEnd("character", v.length);
        if (r.text === "") {
          return v.length;
        }
        return v.lastIndexOf(r.text);
      };
      plugin.previous = function(ret) {
        var prev, sel;
        sel = plugin.selected();
        prev = (sel.length === 0 ? plugin.box.find("li").not(".new").first() : sel.prev().not(".new"));
        if (ret) {
          return prev;
        } else {
          return plugin.select(prev);
        }
      };
      plugin.next = function(ret) {
        var next, sel;
        sel = plugin.selected();
        next = (sel.length === 0 ? plugin.box.find("li").not(".new").last() : sel.next());
        if (ret) {
          return next;
        } else {
          if (next.hasClass("new")) {
            return plugin.input.focus();
          } else {
            return plugin.select(next);
          }
        }
      };
      return plugin.init();
    };
    return $.fn.tagbox = function(options) {
      return this.each(function() {
        var plugin;
        if (undefined === $(this).data("tagbox")) {
          plugin = new $.tagbox(this, options);
          return $(this).data("tagbox", plugin);
        }
      });
    };
  })(jQuery);

}).call(this);
